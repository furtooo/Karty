using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp2
{
    public abstract class MenuComponent
    {
        public string name { get; set; }
        public abstract void display();
    }
    public class MenuComposite : MenuComponent
    {

        List<MenuComponent> Component_L = new List<MenuComponent>();

        public MenuComposite(string name)
        {
            this.name = name;
        }

        public void add_component(MenuComponent mc)
        {
            Component_L.Add(mc);
        }
        public override void display()
        {
            Console.WriteLine(name);
            foreach (var item in Component_L)
            {
                item.display();
            }
        }
    }
    public class MenuItem : MenuComponent
    {
        public MenuItem(string name)
        {
            this.name = name;
        }
        public override void display()
        {
            Console.WriteLine(name);
        }
    }


    internal class Program
    {


        static void Main(string[] args)
        {

            MenuComposite Struktura = new MenuComposite("struktura");
            MenuComposite Kreacja = new MenuComposite("kreacja");
            MenuComposite Zachowanie = new MenuComposite("zachowanie");

            MenuItem Fasada = new MenuItem("Fasada");
            MenuItem Kompozyt = new MenuItem("Kompozyt");
            MenuItem Dekorator = new MenuItem("Dekorator");
            MenuItem singleton = new MenuItem("singleton");
            MenuItem fabryka = new MenuItem("fabryka");
            MenuItem strategia = new MenuItem("strategia");
            MenuItem obserwator = new MenuItem("obserwator");

            Struktura.add_component(fabryka);
            Struktura.add_component(Kompozyt);
            Struktura.add_component(Dekorator);

            Kreacja.add_component(singleton);
            Kreacja.add_component(fabryka);

            Zachowanie.add_component(obserwator);
            Zachowanie.add_component(strategia);

            MenuComposite menu1 = new MenuComposite("Menu1");
            menu1.add_component(Struktura);
            menu1.add_component(Kreacja);
            menu1.add_component(Zachowanie);

            menu1.display();
            Console.ReadKey();

        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp20
{
    internal class Program
    {
        interface IKal
        { 
            int mnoz(int a, int b);
        }
        interface IPot
        {
            int pot2(int a);
        }

        class Adapter : IKal, IPot
        {
            public int mnoz(int a, int b)
            {
                return a * b;
            }

            public int pot2(int a)
            {
                return a * a;
            }
        }



        static void Main(string[] args)
        {
            IPot mojkalk = new Adapter();
            IKal mojkalk2 = new Adapter();
            Console.WriteLine(mojkalk.pot2(4));
            Console.WriteLine(mojkalk2.mnoz(3, 6));
            Console.ReadLine();
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace juzmojeez
{
   class Facade
    {
        Subclass1 _subclass1;
        Subclass2 _subclass2;

        public Facade(Subclass1 subclass1, Subclass2 subclass2)
        {
            this._subclass1 = subclass1;
            this._subclass2 = subclass2;
        }
        public string Do()
        {
            return $"{this._subclass1.Operation()}\n{this._subclass2.Operation()}";
        }
    }

    class Subclass1
    {
        public string name;
        public string Operation()
        {
            return $"Operation named: {name}";
        }
    }
    class Subclass2
    {
        public int num;
        public string Operation()
        {
            return $"Operation number: {num}";
        }
    }

    internal class Program
    {
        static void Main(string[] args)
        {
            Subclass1 klasa1 = new Subclass1();
            Subclass2 klasa2 = new Subclass2();

            klasa1.name = "B3";
            klasa2.num = 1;

            Facade fac = new Facade(klasa1, klasa2);

            Console.WriteLine(fac.Do());
        }
    }
}